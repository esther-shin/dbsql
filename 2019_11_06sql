--그룹함수
--multi row function: 여러개의 행을 입력으로 하나의 결과 행을 생성
--SUM, MAX, MIN, AVG, COUNT
--GROUP BY col|express
--SELECT 절에는 GROUP BY에 기술된 COL,EXPRESS표기 가능

--직원중 가장 높은 급여 조회
--14개의 행이 입력으로 들어가 하나의 결과가 도출
SELECT MAX(sal) max_sal
FROM emp;

--부서별로 가장 높은 급여 조회
SELECT deptno, MAX(sal) max_sal
FROM emp
GROUP BY deptno;

--fn3
DESC EMP;

SELECT deptno
FROM emp;

SELECT  case
        when deptno in(10) then 'accounting'
        when deptno in(20) then ' research'
        when deptno in(30) then 'sales'
    end dname,
    MAX(sal) max_sal, MIN(sal) min_sal, trunc(AVG(sal) ,2) avg_sal
    ,count(sal)count_sal, count(mgr)count_mgr, count(*)count_all
   
FROM emp
GROUP by deptno;
        

--fn4
desc emp;

--fn4 -1
select  hiredate,count(*)cnt
from emp
group by hiredate;


--fn4답

select to_char(hiredate,'yyyymm')hire_yyyymm, count(*)cnt
from emp
group by to_char(hiredate,'yyyymm');

--fn5

select to_char(hiredate,'yyyy')hire_yyyy, count(*)cnt
from emp
group by to_char(hiredate,'yyyy')
order by to_char(hiredate,'yyyy');


--fn6 

select *
from dept;



desc emp;
select count(deptno)cnt
from dept;


--join
--emp테이블에는 dname컬럼이 없다.-->부서 번호(deptno)밖에 없음

desc emp;

--emp테이블에 부서이름을 저장할 수 있는 dname컬럼 추가
ALTER TABLE emp ADD(dname varchar2(14));

SELECT *
FROM emp;

--UPDATE하는 법
UPDATE emp SET dname = 'ACCOUNTING' WHERE DEPTNO=10;
UPDATE emp SET dname = 'RESEARCH' WHERE DEPTNO=20;
UPDATE emp SET dname = 'SALES' WHERE DEPTNO=30;
COMMIT;

SELECT dname,MAX(sal) max_sal
From emp
group by dname;


SELECT*
FROM EMP;

ALTER TABLE emp DROP COLUMN DNAME;

SELECT*
FROM emp;

--ansi natural join: 테이블의 컬럼명이 같은 컬럼을 기준으로 JOIN
SELECT DEPTNO, ENAME,DNAME
FROM EMP NATURAL JOIN DEPT;

--ORACLE join
SELECT emp.empno,emp.ename, emp.deptno, dept.dname ,dept.loc
FROM emp,dept
where emp.deptno = dept.deptno;

SELECT e.empno,e.ename, e.deptno, d.dname ,d.loc
FROM emp e,dept d
where e.deptno = d.deptno;

--ANSI JOIN WITH USING
SELECT emp.empno, emp.ename,dept.dname
FROM emp JOIN dept USING (deptno);

--FROM 절에 조인 대상 테이블 나열
--WHERE절에 조인 조건 기술
--기존에 사용하던 조건 제약도 기술 가능.
SELECT EMP.EMPNO, EMP.ENAME, DEPT.DNAME
FROM EMP, DEPT
WHERE emp.DEPTNO = dept.DEPTNO
and emp.job ='SALESMAN';
--JOB이 SALES인 사람만 대상으로 조회

SELECT EMP.EMPNO, EMP.ENAME, DEPT.DNAME
FROM EMP, DEPT
WHERE emp.job ='SALESMAN'
and emp.DEPTNO = dept.DEPTNO;
--위 아래 순서 바껴도 상관 없음.

--JOIN with ON(개발자가 조인 컬럼을 on절에 직접 기술)
SELECT emp.empno, emp.ename, dept.dname
FROM emp JOIN dept ON(emp.deptno = dept.deptno);

--self join : 같은 테이블끼리 조인
--emp 테이블의 mgr정보를 참고하기 위해서 emp 테이블과 조인을 해야한다.
--a : 직원 정보, b:관리자
SELECT a.empno, a.ename, a.mgr, b.empno, b.ename
FROM emp a JOIN emp b ON(a.mgr =b.empno);
--매니저와 사원 번호 가 같은 것을 기준으로 조회 한거..


select *
from emp;

SELECT a.empno, a.ename, a.mgr, b.empno, b.ename
FROM emp a JOIN emp b ON(a.mgr =b.empno)
where a.empno between 7369 and 7698;


--oracle (where 절에다가 조건을 다 서술해 주면 됨)
SELECT  a.empno, a.ename, a.mgr, b.empno, b.ename
FROM emp a, emp b
where a.mgr= b.empno and a. empno between 7369 and 7698;


--non-dquijoining( 등식 조인이 아닌 경우)
SELECT *
FROM salgrade;

desc salgrade;

--직원의 급여 등급은???
select *
from emp;
--위 아래에 같은 칼럼은 없지만 range값으로 알수 있음.
--sal between low salary amd high salary
desc emp;

SELECT emp.empno, emp.ename, emp.sal, salgrade.*
FROM emp, salgrade
WHERE emp.sal BETWEEN salgrade.losal AND salgrade.hisal
ORDER BY sal;

SELECT emp.empno, emp.ename, emp.sal, salgrade.*
FROM emp JOIN salgrade ON(emp.sal BETWEEN salgrade.losal AND salgrade.hisal);

SELECT emp.empno, emp.ename, emp.sal, salgrade.*
FROM emp, salgrade
WHERE emp.sal BETWEEN salgrade.losal AND salgrade.hisal
ORDER BY sal;

--NON EQUI JOIN
SELECT a.empno, a.ename, a.mgr, b.empno, b.ename
FROM emp a, emp b
WHERE a.mgr != b.empno
and a.empno =7369;

-- 14개
SELECT a.empno, a.ename, a.mgr, b.empno, b.ename
FROM emp a, emp b
WHERE a.empno =7369;


--fn0
desc emp;
desc dept;

SELECT a.empno, a.ename, a.deptno, b.dname
FROM emp a, dept b
where a.deptno = b.deptno
ORDER BY a.deptno;

--fn0_1

select*
from emp;

select *
from dept;
--123123
desc emp;
desc dept;

SELECT empno, ename, dept.deptno, dname
FROM emp, dept
where emp.deptno= dept.deptno
and emp.deptno in(10,30) ;



