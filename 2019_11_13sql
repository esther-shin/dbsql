--unique table level constraint

DROP TABLE dept_test;
CREATE TABLE dept_test(
    dept NUMBER(2) PRIMARY KEY,
    dname VARCHAR2(14),
    loc VARCHAR2(13),
    
    --CONSTRAINT 제약조건명 CONTRATINT TYPE [(컬럼...)]
    CONSTRAINT uk_dept_test_dname_loc UNIQUE (dname, loc)
);

INSERT INTO dept_test VALUES (1,'ddit','daejeon');
--첫번째 쿼리에 의해 dname, loc값이 중복 되므로 두번째 쿼리는 실행 되지 못한다.
INSERT INTO dept_test VALUES (2,'ddit','daejeon');

--foreign key (참조 키)
DROP TABLE dept_test;
CREATE TABLE dept_test(
    deptno NUMBER(2) PRIMARY KEY,
    dname VARCHAR2(14),
    loc VARCHAR2(13)
    
    );
INSERT INTO dept_test VALUES (1, 'ddit','daejeon');
COMMIT;

select *
from dept_test;

--emp test
DESC emp;
CREATE TABLE emp_test(
    empno NUMBER(4) PRIMARY KEY,
    ename VARCHAR2(10),
    deptno NUMBER(2) REFERENCES dept_test(deptno)
);

--dept_test테이블에 1번 부서번호만 존재하고
--fk제약을 dept_test.deptno컬럼을 참조도록 생성하여
--1번 이외의 부서 번호는 emp_test 테이블에 입력 될 수 없다.

--emp_test fx테스트 insert
INSERT INTO emp_test VALUES (9999,'brown', 1);

--2번 부서는 dept _test 테이블에 존재하지 않는 데이터 이기때문에
--fx제약에 의해 INSERT가 정상적으로 동작하지 못한다.
INSERT INTO emp_test VALUES (9999,'sally',2);
--부모 키를 찾을 수 없다...(오류)

--무결성 제약에러 발생시 뭘 해야 할까?
-- 입력하려고 하는 값이 맞는 건가? (2번이 맞나?1번 아니야?)
--부모 테이블에 값이 왜 입력 안됐는지 확인(dept_test확인)

--fk제약 table level constraint

DROP TABLE emp_test;
CREATE TABLE emp_test(
    empno NUMBER(4) PRIMARY KEY,
    ename VARCHAR2(10),
    deptno NUMBER(2),
    CONSTRAINT fk_emp_test_to_dept_test FOREIGN KEY
    (deptno) REFERENCES dept_test(deptno)
);
    
SELECT *
FROM emp_test;


--fk제약을 생성하려면  참조하려는 컬럼에 인덱스가 생성되어있어야 한다.
DROP TABLE dept_test;
DROP TABLE emp_test;

CREATE TABLE dept_test(
    deptno NUMBER(2)/*PRIMARY KEY -->UNIQUE 제약 X ->인덱스 생성 X*/
    dname VARCHAR2(14),
    loc VARCHAR2(13)
    );
    

CREATE TABLE dept_test(
    deptno NUMBER(2) PRIMARY KEY,
    dname VARCHAR2(14),
    loc VARCHAR2(13)
    );
    
CREATE TABLE emp_test(
empno NUMBER(4),
ename VARCHAR2(10),
--dept_test.dept_no컬럼에 인덱스가 없기 때문에 정상적으로 
--fk제약을 생성할 수 없다.
deptno NUMBER(2) REFERENCES dept_test(deptno)
);


--테이블 삭제
DROP TABLE emp_test;

INSERT INTO dept_test VALUES (1,'ddit', 'daejeon');
INSERT INTO emp_test VALUES (9999,'brown',1);
COMMIT;

SELECT *
FROM emp_test;

SELECT *
FROM dept_test;
--부모emp_test를 먼저 삭제하고 dept_test를 삭제해야됨.
DELETE emp_test WHERE empno=9999;
DELETE dept_test WHERE deptno=1;

--dept_test테이블의 deptno값을 참조하는 데이터가 있을 경우
--삭제가 불가능 하다
--즉 자식 테이블에서 참조하는 테이터가 없어야 부모 테일블의 데이터를 삭제 가능하다.
--부모가 먼저 존재하고 자식이 존재할 수 있다...
DELETE detp_test WHERE deptno=1;




--fk제약  옵션
--default : 데이터 입력/삭제시 순차적으로 처리해줘야 fk제약을 위배하지 않는다.
--on delete cascade: 부모 데이터 삭제시 참조하는 자식 테이블 같이 삭제
--on delete null: 부모 데이터 삭제시 참조하는 자식 테이블 값null 설정.



DROP TABLE emp_test;

CREATE TABLE emp_test(
    empno NUMBER(4) PRIMARY KEY,
    ename VARCHAR2(10),
    deptno NUMBER(2),
    CONSTRAINT fk_emp_test_to_dept_test FOREIGN KEY
    (deptno) REFERENCES dept_test(deptno) ON DELETE CASCADE 
);

INSERT INTO emp_test VALUES (9999,'brown',1);

select *
from dept_test;
SELECT*
FROM emp_test;

--fk제약 defualt 옵션시에는 부모 테이블의 테이터를 삭제하기 전에 자식 테이블에서
--참조하는 데이터가 없어야 정상적으로 삭제가 가능했음
--ON DELETE CASCADE 의 경우 부모 테이블 삭제시 참조하는 자식 테이블의 데이터를
--같이 삭제한다.
--1.삭제 퀴리가 정상적으로 실행 되는지?
--2.자식 테이블에 테이터가 삭제 되었는지?

DELETE dept_test
WHERE deptno=1;           --삭제 퀴리가 정상적으로 실행 되는지?

SELECT *
FROM emp_test;


DROP TABLE emp_test;

CREATE TABLE emp_test(
    empno NUMBER(4) PRIMARY KEY,
    ename VARCHAR2(10),
    deptno NUMBER(2),
    CONSTRAINT fk_emp_test_to_dept_test FOREIGN KEY
    (deptno) REFERENCES dept_test(deptno) ON DELETE SET NULL
);

INSERT INTO dept_test VALUES (1,'ddit','daejeon');
INSERT INTO emp_test VALUES (9999,'brown',1);

COMMIT;

select *
from dept_test;
SELECT*
FROM emp_test;


--fk제약 defualt 옵션시에는 부모 테이블의 테이터를 삭제하기 전에 자식 테이블에서
--참조하는 데이터가 없어야 정상적으로 삭제가 가능했음
--ON DELETE NULL 의 경우 부모 테이블 삭제시 참조하는 자식 테이블의 데이터를
--참조 컬럼을 NULL로 수정한다.
--1.삭제 퀴리가 정상적으로 실행 되는지?
--2.자식 테이블에 테이터가  NULL로 변경 되었는지?
DELETE dept_test
WHERE deptno =1;

SELECT *
FROM emp_test;


--CHECK제약: 컬럼의 값을 정해진 범위, 혹은 값만 들어오게끔 제약
DROP TABLE emp_test;
CREATE TABLE emp_test(
empno NUMBER(4),
ename VARCHAR2(10),
sal NUMBER CHECK (sal>=0)
);

--sal 컬럼은 CHECK제약 조건에 의해 0이거나 ,0보다 큰 값만 입력이 가능하다.
INSERT INTO emp_test VALUES (9999,'brown',10000);
INSERT INTO emp_test VALUES (9999,'sally',-10000);

DROP TABLE emp_test;
CREATE TABLE emp_test(
empno NUMBER(4),
ename VARCHAR2(10),
--emp_gb : 01-정직원,02-인턴
emp_gb VARCHAR2(2) CHECK (emp_gb IN('01','02'))
);

INSERT INTO emp_test VALUES (9999,'brown','01');

--emp_gb 컴럼 체크제약에 의해 01,02가 아닌 값은 입력될 수 없다.
INSERT INTO emp_test VALUES (9998,'sally','03');


--TABLE 결과를 이용한 TABLE 생성
--Create Table 테이블 명 AS
--SELECT 쿼리
--> CTAS

DROP TABLE emp_test;
DROP TABLE dept_test;

--CUSTOMER 테이블을 사용하여 CUSTOMER_TEST테이블로 생성
--CUSTOMER 테이블의 테이터도 같이 복제
CREATE TABLE customer_test AS

SELECT *
FROM customer;


CREATE TABLE test AS
SELECT SYSDATE dt
FROM dual;

SELECT *
FROM test;

DROP TABLE test;

--데이터는 복제하지 않고 특정 테이블의 컬럼 형식만 가져올 순 없을까?
DROP TABLE customer_test;
CREAT table customer_test AS
SELECT *
FROM customer
WHERE 1 !=1;
--절대로 만족할 수 없는 조건을 넣어야 됨..

CREATE TABLE CUSTOMER _191113 AS
SELECT *
FROM customer;

--테이블 변경
--새로운 컬럼 추가

DROP TABLE emp_test;
CREATE TABLE emp_test(
empno NUMBER(4),
ename VARCHAR2(10)
);

--신규 컬럼 추가
ALTER TABLE emp_test ADD( detpno NUMBER(2));
DESC emp_test;

--기존 컬럼 변경(테이블에 데이터가 없는 상황)
ALTER TABLE EMP_TEST MODIFY (ename VARCHAR2(200) );
DESC emp_test;

ALTER TABLE EMP_TEST MODIFY(ename NUMBER);
DESC emp_test;

--데이터가 있는 상황에서 컬럼 변경 : 제한적이다
INSERT INTO emp_test VALUES(9999,1000,10);
COMMIT;

--데이터 타입을 변경하기 위해서는 컬럼 값이 비어 있어야 한다.
ALTER TABLE EMP_TEST MODIFY(ename VARCHAR2(10) );

--DEFAULT 설정
DESC emp_test;
ALTER TABLE emp_test MODIFY (deptno DEFAULT 10);


select*
from emp_test;

--컬럼명 변경
ALTER TABLE emp_test RENAME COLUMN  DETPNO TO dno;

--컬럼 제거
ALTER TABLE emp_test DROP COLUMN dno;
ALTER TABLE emp_test DROP(DNO);

--테이블 변경: 제약 조건 추가
--PRIMARY KEY
ALTER TABLE emp_test ADD CONSTRAINT pk_emp_test PRIMARY KEY(empno);

--제약 조건 삭제
ALTER TABLE emp_test DROP CONSTRAINT pk_emp_test;

--UNIQUE 제약-empno
ALTER TABLE emp_test ADD CONSTRAINT uk_tmp_test UNIQUE (empno);

--UNIQUE 제약 삭제 :uk_emp_test
ALTER TABLE emp_test DROP CONSTRAINT uk_tmp_test;

--FOREIGN KEY 추가
--실습
--1.dept 테이블의 deptno컬럼으로 primary key제약을 테이블 변경
--ddl을 통해 생성

desc dept;
ALTER TABLE dept ADD CONSTRAINT pk_dept PRIMARY KEY (deptno);

--2.emp 테이블의 empno컬럼으로 primary key제약을 테이블 변경
--ddl을 통해 생성
ALTER TABLE emp ADD CONSTRAINT pk_emp PRIMARY KEY(empno);


--3.emp 테이블의 deptno컬럼으로 dept테이블의 deptno컬럼을 
--참조하는 fk제약을 테이블 변경 
--ddl을 통해 생성
SELECT*
FROM emp_test;


ALTER TABLE emp ADD CONSTRAINT fk_emp_dept FOREIGN KEY (deptno)
REFERENCES dept (deptno);


--emp_test ->dept.deptno fk제약 생성.(ALTER TABLE)
desc emp_test;

DROP TABLE emp_test;
CREATE TABLE emp_test(
    empno NUMBER(4),
    ename VARCHAR2(10),
    deptno NUMBER(2) 
);
--1
CREATE TABLE emp_test(
    empno NUMBER(4),
    ename VARCHAR2(10),
    deptno NUMBER(2) REFERENCES dept(deptno)
);

--2
ALTER TABLE emp_test ADD CONSTRAINTS emp_test_dept FOREIGN KEY (deptno) REFERENCES dept(deptno);

--CHECK제약 추가 (ename길이 체크, 길이가 3글자 이상)
ALTER TABLE emp_test ADD CONSTRAINT check_ename_len
CHECK(LENGTH(ename)>3);

INSERT INTO emp_test VALUES (9999,'brown',10);
INSERT INTO emp_test VALUES (9999,'br',10);
ROLLBACK;

--CHECK제약 제거
ALTER TABLE emp_test DROP CONSTRAINT check_ename_len;


--NOT NULL제약 추가
ALTER TABLE emp_test MODIFY (ename NOT NULL);

--NOT NULL제약 제거
ALTER TABLE emp_test MODIFY( ename NULL);
